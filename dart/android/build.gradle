// The Android Gradle Plugin builds the native code with the Android NDK.

group 'com.example.fhel'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // The Android Gradle Plugin knows how to build native code with the NDK.
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "de.undercouch:gradle-download-task:5.6.0"
    }
}

apply plugin: "de.undercouch.download"

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.example.fhel'
    }

    // Bumping the plugin compileSdkVersion requires all clients of this plugin
    // to bump the version in their app.
    compileSdkVersion 33

    // Bumping the plugin ndkVersion requires all clients of this plugin to bump
    // the version in their app and to download a newer version of the NDK.
    ndkVersion android.ndkVersion

    //
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 32
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def LIB_NAME = "fhel"
def LIB_URL = "https://github.com/jeffmur/fhel/releases/download"
def SRC_DIR = project.buildscript.sourceFile.parentFile.parentFile
def ANDROID_DIR = "${SRC_DIR}/android"
def BIN_VER = new File("${SRC_DIR}/binary.version").text
def SUPPORT_ARCH = ['x86_64', 'arm64-v8a', 'armeabi-v7a']

task downloadLibs(type: Download) {
    println "Downloading fhel binaries..."
    def SRC_URLS = SUPPORT_ARCH.collect { arch ->
        "${LIB_URL}/v${BIN_VER}/lib${LIB_NAME}-android-${arch}.tar.gz"
    }
    src(SRC_URLS)
    dest SRC_DIR
    overwrite false
}

SUPPORT_ARCH.each { arch ->
    def extractTaskName = "${LIB_NAME}_extract_libs_${arch}"
    task(extractTaskName, type: Copy) {
        from tarTree(resources.gzip("${SRC_DIR}/lib${LIB_NAME}-android-${arch}.tar.gz"))
        into "${ANDROID_DIR}/src/main/jniLibs/${arch}"
    }
}

task extractLibs(dependsOn: downloadLibs) {
    println "Extracting ${LIB_NAME} binaries..."
    ARCHS.each { arch ->
        finalizedBy "${LIB_NAME}_extract_libs_${arch}"
    }
}

def FHEL_DISABLE_AUTO_BUILD=System.env.FHEL_DISABLE_AUTO_BUILD ?: null
if (FHEL_DISABLE_AUTO_BUILD != null) {
    println "Found FHEL_DISABLE_AUTO_BUILD, skip auto build"
} else {
    println "FHEL_DISABLE_AUTO_BUILD is not set, running ${LIB_NAME}:setup"
    preBuild.dependsOn extractLibs
}
